$input v_texcoord0, v_color0

#include <bgfx_shader.sh>

SAMPLER2D(u_texture, 0);

uniform vec4 u_params;  // x=smoothing
                        // shadow: x=smoothing, y=shadowSmoothing, z=shadowOffset(x), w=shadowOffset(y)
                        // outline: x=smoothing, y=outlineSmoothing, z=outline (0~0.5)
#ifdef SHADOW
uniform vec4 u_shadowColor;
#elif OUTLINE
uniform vec4 u_outlineColor;
uniform vec4 u_textureSize; // x,y = size
#endif

float contour(float d, float w)
{
    return smoothstep(0.5 - w, 0.5 + w, d);
}

float samp(vec2 coords, float w)
{
    return contour(texture2D(u_texture, coords).a, w);
}

void main()
{
    vec4 textColor = v_color0 * texture2D(u_texture, v_texcoord0);

#ifdef SHADOW
    vec2 shadowCoord = v_texcoord0 - u_params.zw;
    float shadowDistance = texture2D(u_texture, shadowCoord).a;
    float shadowAlpha = contour(shadowDistance, fwidth(shadowDistance));
    vec4 shadowColor = vec4(u_shadowColor.xyz, u_shadowColor.a * shadowAlpha);
    gl_FragColor = mix(shadowColor, textColor, textColor.a);
#elif OUTLINE
    vec2 coords = v_texcoord0;
    vec2 offset = 2.0*vec2(u_params.z, u_params.z) / u_textureSize.xy;
    float n = texture2D(u_texture, vec2(coords.x, coords.y - offset.y)).a;
    float e = texture2D(u_texture, vec2(coords.x + offset.x, coords.y)).a;
    float s = texture2D(u_texture, vec2(coords.x, coords.y + offset.y)).a;
    float w = texture2D(u_texture, vec2(coords.x - offset.x, coords.y)).a;
    float alpha = textColor.a;
    alpha = mix(alpha, 1.0, s);
    alpha = mix(alpha, 1.0, w);
    alpha = mix(alpha, 1.0, n);
    alpha = mix(alpha, 1.0, e);

    vec4 outlineColor = vec4(u_outlineColor.rgb, alpha);
    gl_FragColor = mix(outlineColor, textColor, textColor.a);
#else
    gl_FragColor = textColor;
#endif

}